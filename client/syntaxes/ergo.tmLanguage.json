{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Ergo",
	"scopeName": "source.ergo",
	"fileTypes": [
		".ergo"
	],
	"patterns": [
		{
			"include": "#ergo-contract-declaration"
		},
		{
			"include": "#ergo-clause-declaration"
		},
		{
			"include": "#function-declaration"
		},
		{
			"include": "#constant-declaration"
		},
		{
			"include": "#type-declaration"
		},
		{
			"include": "#enum-declaration"
		},
		{
			"include": "#namespace-declaration"
		},
		{
			"include": "#import-declaration"
		},
		{
			"include": "#comment"
		}
	],
	"repository": {
		"statements": {
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#regex"
				},
				{
					"include": "#template"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#declaration"
				},
				{
					"include": "#match-statement"
				},
				{
					"include": "#for-loop"
				},
				{
					"include": "#after-operator-block"
				},
				{
					"include": "#decl-block"
				},
				{
					"include": "#control-statement"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"ergo-contract-declaration": {
			"name": "meta.var.expr.ergo",
			"begin": "(?<!\\.|\\$)\\b(contract\\b)(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))\\s+(over\\b)(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))(\\s+(state\\b)(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*)))?\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.contract.ergo"
				},
				"2": {
					"name": "entity.name.contract.ergo"
				},
				"3": {
					"name": "keyword.control.over.ergo"
				},
				"4": {
					"name": "entity.name.type.module.ergo"
				},
				"6": {
					"name": "keyword.control.state.ergo"
				},
				"7": {
					"name": "entity.name.type.module.ergo"
				}
			},
			"end": "(?=;|\\})|(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"ergo-clause-declaration": {
			"name": "meta.clause.ergo",
			"begin": "(?<!\\.|\\$)\\b(clause\\b)(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.clause.ergo"
				},
				"2": {
					"name": "entity.name.function.ergo"
				}
			},
			"end": "(?=;|\\})|(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#function-parameters"
				},
				{
					"include": "#return-type"
				},
				{
					"include": "#emit-type"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"var-expr": {
			"name": "meta.var.expr.ergo",
			"begin": "(?<!\\.|\\$)((\\blet)\\s+)(?!\\$)",
			"beginCaptures": {
				"2": {
					"name": "keyword.control.let.ergo"
				}
			},
			"end": "(?=$|;|}|(\\s+(of|in)\\s+))",
			"patterns": [
				{
					"include": "#var-single-variable"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"enforce-expr": {
			"name": "meta.enforce.ergo",
			"begin": "(?<!\\.|\\$)((\\benforce)\\s*)(?!\\$)",
			"beginCaptures": {
				"2": {
					"name": "keyword.control.enforce.ergo"
				}
			},
			"end": "(?=$|;|}|(\\s+(of|in)\\s+))",
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#comment"
				}
			]
		},
		"var-single-variable": {
			"name": "meta.var-single-variable.expr.ergo",
			"begin": "([_$[:alpha:]][_$[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "variable.other.readwrite.ergo"
				}
			},
			"end": "(?=$|[;,=}]|(\\s+(of|in)\\s+))",
			"patterns": [
				{
					"include": "#type-annotation"
				},
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				}
			]
		},
		"object-binding-element": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)",
					"beginCaptures": {
						"1": {
							"name": "variable.object.property.ergo"
						},
						"2": {
							"name": "punctuation.destructuring.ergo"
						}
					},
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#object-binding-pattern"
						},
						{
							"include": "#array-binding-pattern"
						},
						{
							"name": "variable.other.readwrite.ergo",
							"match": "([_$[:alpha:]][_$[:alnum:]]*)"
						},
						{
							"include": "#variable-initializer"
						}
					]
				},
				{
					"include": "#object-binding-pattern"
				},
				{
					"include": "#destructuring-variable-rest"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"array-binding-element": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#object-binding-pattern"
				},
				{
					"include": "#array-binding-pattern"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"destructuring-variable-rest": {
			"match": "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)",
			"captures": {
				"1": {
					"name": "keyword.operator.rest.ergo"
				},
				"2": {
					"name": "variable.other.readwrite.ergo"
				}
			}
		},
		"object-binding-pattern": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.ergo"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.object.ergo"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.object.ergo"
				}
			},
			"patterns": [
				{
					"include": "#object-binding-element"
				}
			]
		},
		"array-binding-pattern": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.ergo"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.array.ergo"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.array.ergo"
				}
			},
			"patterns": [
				{
					"include": "#array-binding-element"
				}
			]
		},
		"ternary-expression": {
			"begin": "(?=\\?)",
			"end": "(?=$|[;,})\\]])",
			"patterns": [
				{
					"include": "#ternary-operator"
				},
				{
					"include": "#expression"
				}
			]
		},
		"ternary-operator": {
			"begin": "(\\?)",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.ternary.ergo"
				}
			},
			"end": "(:)",
			"endCaptures": {
				"0": {
					"name": "keyword.operator.ternary.ergo"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"expression": {
			"name": "meta.expression.ergo",
			"patterns": [
				{
					"include": "#jsx"
				},
				{
					"include": "#string"
				},
				{
					"include": "#regex"
				},
				{
					"include": "#template"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#class-or-interface-declaration"
				},
				{
					"include": "#arrow-function"
				},
				{
					"include": "#cast"
				},
				{
					"include": "#ternary-expression"
				},
				{
					"include": "#new-expr"
				},
				{
					"include": "#object-literal"
				},
				{
					"include": "#expression-operators"
				},
				{
					"include": "#support-objects"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#paren-expression"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-accessor"
				}	
			]
		},
		"control-statement": {
			"patterns": [
				{
					"name": "keyword.control.flow.ergo",
					"match": "(?<!\\.|\\$)\\b(return|(set\\s+state)|throw|emit)\\b(?!\\$)"
				},
				{
					"name": "keyword.control.match.ergo",
					"match": "(?<!\\.|\\$)\\b(case|default|match)\\b(?!\\$)"
				},
				{
					"name": "keyword.control.conditional.ergo",
					"match": "(?<!\\.|\\$)\\b(else|if|then)\\b(?!\\$)"
				}
			]
		},
		"declaration": {
			"name": "meta.declaration.ergo",
			"patterns": [
				{
					"include": "#ergo-contract-declaration"
				},
				{
					"include": "#ergo-clause-declaration"
				},
				{
					"include": "#decorator"
				},
				{
					"include": "#var-expr"
				},
				{
					"include": "#enforce-expr"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#constant-declaration"
				},
				{
					"include": "#class-or-interface-declaration"
				},
				{
					"include": "#type-declaration"
				},
				{
					"include": "#enum-declaration"
				},
				{
					"include": "#namespace-declaration"
				},
				{
					"include": "#import-equals-declaration"
				},
				{
					"include": "#import-declaration"
				},
				{
					"include": "#export-declaration"
				}	
			]
		},
		"decorator": {
			"name": "meta.decorator.ergo",
			"begin": "(?<!\\.|\\$)\\@",
			"beginCaptures": {
				"0": {
					"name": "punctuation.decorator.ergo"
				}
			},
			"end": "(?=\\s)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"type-declaration": {
			"name": "meta.type.declaration.ergo",
			"begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.ergo"
				},
				"2": {
					"name": "storageg.type.type.ergo"
				},
				"3": {
					"name": "entity.name.type.ergo"
				}
			},
			"end": "(?=[};]|\\bvariable\\b|\\blet\\b|\\bconst\\b|\\bfunction\\b|\\bclass\\b|\\bnamespace\\b|\\bimport\\b|\\benum\\b)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#type"
				},
				{
					"match": "(=)\\s*",
					"captures": {
						"1": {
							"name": "keyword.operator.assignment.ergo"
						}
					}
				}
			]
		},
		"enum-declaration": {
			"name": "meta.enum.declaration.ergo",
			"begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.ergo"
				},
				"2": {
					"name": "storage.modifier.ergo"
				},
				"3": {
					"name": "storage.type.enum.ergo"
				},
				"4": {
					"name": "entity.name.type.enum.ergo"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.block.ergo"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.block.ergo"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"begin": "([_$[:alpha:]][_$[:alnum:]]*)",
							"beginCaptures": {
								"0": {
									"name": "variable.other.enummember.ergo"
								}
							},
							"end": "(?=,|\\}|$)",
							"patterns": [
								{
									"include": "#comment"
								},
								{
									"include": "#variable-initializer"
								}
							]
						},
						{
							"begin": "(?=(?:(?:\\'[^']*\\')|(?:\\\"[^\"]*\\\")))",
							"end": "(?=,|\\}|$)",
							"patterns": [
								{
									"include": "#string"
								},
								{
									"include": "#comment"
								},
								{
									"include": "#variable-initializer"
								}
							]
						},
						{
							"include": "#punctuation-comma"
						}
					]
				}
			]
		},
		"namespace-declaration": {
			"name": "meta.namespace.declaration.ergo",
			"begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(namespace|module)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.ergo"
				},
				"2": {
					"name": "storage.type.namespace.ergo"
				}
			},
			"end": "(?=$|\\{)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"name": "entity.name.type.module.ergo",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				},
				{
					"name": "punctuation.accessor.ergo",
					"match": "\\."
				}
			]
		},
		"import-equals-declaration": {
			"patterns": [
				{
					"name": "meta.import-equals.external.ergo",
					"begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(import)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.export.ergo"
						},
						"2": {
							"name": "keyword.control.import.ergo"
						},
						"3": {
							"name": "variable.other.readwrite.alias.ergo"
						},
						"4": {
							"name": "keyword.operator.assignment.ergo"
						},
						"5": {
							"name": "keyword.control.require.ergo"
						},
						"6": {
							"name": "meta.brace.round.ergo"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.ergo"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#string"
						}
					]
				},
				{
					"name": "meta.import-equals.internal.ergo",
					"begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(import)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.export.ergo"
						},
						"2": {
							"name": "keyword.control.import.ergo"
						},
						"3": {
							"name": "variable.other.readwrite.alias.ergo"
						},
						"4": {
							"name": "keyword.operator.assignment.ergo"
						}
					},
					"end": "(?=;|$)",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\.)",
							"captures": {
								"1": {
									"name": "entity.name.type.module.ergo"
								},
								"2": {
									"name": "punctuation.accessor.ergo"
								}
							}
						},
						{
							"name": "variable.other.readwrite.ergo",
							"match": "([_$[:alpha:]][_$[:alnum:]]*)"
						}
					]
				}
			]
		},
		"import-declaration": {
			"name": "meta.import.ergo",
			"begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(import)(?!(\\s*:)|(\\$))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.ergo"
				},
				"2": {
					"name": "keyword.control.import.ergo"
				}
			},
			"end": "(?=;|$)",
			"patterns": [
				{
					"include": "#import-export-declaration"
				}
			]
		},
		"import-export-declaration": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#import-export-block"
				},
				{
					"name": "keyword.control.from.ergo",
					"match": "\\bfrom\\b"
				},
				{
					"include": "#import-export-clause"
				}
			]
		},
		"import-export-block": {
			"name": "meta.block.ergo",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"patterns": [
				{
					"include": "#import-export-clause"
				}
			]
		},
		"import-export-clause": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"comment": "(default|*|name) as alias",
					"match": "(?x) (?: \\b(default)\\b | (\\*) | ([_$[:alpha:]][_$[:alnum:]]*)) \\s+  (as) \\s+ (?: (\\b default \\b | \\*) | ([_$[:alpha:]][_$[:alnum:]]*))",
					"captures": {
						"1": {
							"name": "keyword.control.default.ergo"
						},
						"2": {
							"name": "constant.language.import-export-all.ergo"
						},
						"3": {
							"name": "variable.other.readwrite.ergo"
						},
						"4": {
							"name": "keyword.control.as.ergo"
						},
						"5": {
							"name": "invalid.illegal.ergo"
						},
						"6": {
							"name": "variable.other.readwrite.alias.ergo"
						}
					}
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"name": "constant.language.import-export-all.ergo",
					"match": "\\*"
				},
				{
					"name": "keyword.control.default.ergo",
					"match": "\\b(default)\\b"
				},
				{
					"name": "variable.other.readwrite.alias.ergo",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				}
			]
		},
		"class-or-interface-declaration": {
			"name": "meta.class.ergo",
			"begin": "(?<!\\.|\\$)\\b(?:(export)\\s+)?\\b(?:(abstract)\\s+)?\\b(?:(class)|(interface))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.ergo"
				},
				"2": {
					"name": "storage.modifier.ergo"
				},
				"3": {
					"name": "storage.type.class.ergo"
				},
				"4": {
					"name": "storage.type.interface.ergo"
				}
			},
			"end": "(?<=\\})",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#class-or-interface-heritage"
				},
				{
					"match": "[_$[:alpha:]][_$[:alnum:]]*",
					"captures": {
						"0": {
							"name": "entity.name.type.class.ergo"
						}
					}
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#class-or-interface-body"
				}
			]
		},
		"class-or-interface-heritage": {
			"begin": "(?<!\\.|\\$)(?:\\b(extends|implements)\\b)(?!\\$)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.ergo"
				}
			},
			"end": "(?=\\{)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#class-or-interface-heritage"
				},
				{
					"include": "#type-parameters"
				},
				{
					"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\.)",
					"captures": {
						"1": {
							"name": "entity.name.type.module.ergo"
						},
						"2": {
							"name": "punctuation.accessor.ergo"
						}
					}
				},
				{
					"match": "([_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "entity.other.inherited-class.ergo"
						}
					}
				}
			]
		},
		"class-or-interface-body": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#decorator"
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#indexer-declaration"
				},
				{
					"include": "#field-declaration"
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#access-modifier"
				},
				{
					"include": "#property-accessor"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"type-object": {
			"name": "meta.object.type.ergo",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"patterns": [
				{
					"include": "#type-object-members"
				}
			]
		},
		"type-object-members": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#indexer-declaration"
				},
				{
					"include": "#indexer-mapped-type-declaration"
				},
				{
					"include": "#field-declaration"
				},
				{
					"include": "#type-annotation"
				},
				{
					"begin": "\\.\\.\\.",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.spread.ergo"
						}
					},
					"end": "(?=\\}|;|,|$)|(?<=\\})",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"field-declaration": {
			"name": "meta.field.declaration.ergo",
			"begin": "(?<!\\()(?:(?<!\\.|\\$)\\b(readonly)\\s+)?(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[[^\\]]*\\]))\\s*(\\?\\s*)?(=|:))",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.ergo"
				}
			},
			"end": "(?=\\}|;|,|$)|(?<=\\})",
			"patterns": [
				{
					"include": "#variable-initializer"
				},
				{
					"begin": "(?=((?:[_$[:alpha:]][_$[:alnum:]]*)|(?:\\'[^']*\\')|(?:\\\"[^\"]*\\\")|(\\[[^\\]]*\\]))\\s*(\\?\\s*)?(=|:))",
					"end": "(?=[};,=]|$)|(?<=\\})",
					"patterns": [
						{
							"include": "#type-annotation"
						},
						{
							"include": "#string"
						},
						{
							"include": "#array-literal"
						},
						{
							"include": "#comment"
						},
						{
							"name": "variable.object.property.ergo",
							"match": "[_$[:alpha:]][_$[:alnum:]]*"
						},
						{
							"name": "keyword.operator.optional.ergo",
							"match": "\\?"
						}
					]
				}
			]
		},
		"method-declaration": {
			"name": "meta.method.declaration.ergo",
			"begin": "(?<!\\.|\\$)(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(?:\\b(?:(new)|(constructor))\\b(?!\\$|:))|(?:(\\*)\\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[[^\\]]*\\]))\\s*(\\??))?\\s*[\\(\\<]))",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.ergo"
				},
				"2": {
					"name": "storage.modifier.ergo"
				},
				"3": {
					"name": "storage.modifier.async.ergo"
				},
				"4": {
					"name": "storage.type.property.ergo"
				},
				"5": {
					"name": "keyword.operator.new.ergo"
				},
				"6": {
					"name": "storage.type.ergo"
				},
				"7": {
					"name": "keyword.generator.asterisk.ergo"
				}
			},
			"end": "(?=\\}|;|,)|(?<=\\})",
			"patterns": [
				{
					"include": "#method-declaration-name"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#function-parameters"
				},
				{
					"include": "#return-type"
				},
				{
					"include": "#method-overload-declaration"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"method-overload-declaration": {
			"begin": "(?<!\\.|\\$)(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(?:\\b(?:(new)|(constructor))\\b(?!\\$|:))|(?:(\\*)\\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[[^\\]]*\\]))\\s*(\\??))?\\s*[\\(\\<]))",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.ergo"
				},
				"2": {
					"name": "storage.modifier.ergo"
				},
				"3": {
					"name": "storage.modifier.async.ergo"
				},
				"4": {
					"name": "storage.type.property.ergo"
				},
				"5": {
					"name": "keyword.operator.new.ergo"
				},
				"6": {
					"name": "storage.type.ergo"
				},
				"7": {
					"name": "keyword.generator.asterisk.ergo"
				}
			},
			"end": "(?=\\(|\\<)",
			"patterns": [
				{
					"include": "#method-declaration-name"
				}
			]
		},
		"method-declaration-name": {
			"begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[[^\\]]*\\]))\\s*(\\??)\\s*[\\(\\<])",
			"end": "(?=\\(|\\<)",
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#array-literal"
				},
				{
					"name": "entity.name.function.ergo",
					"match": "[_$[:alpha:]][_$[:alnum:]]*"
				},
				{
					"name": "keyword.operator.optional.ergo",
					"match": "\\?"
				}
			]
		},
		"indexer-declaration": {
			"name": "meta.indexer.declaration.ergo",
			"begin": "(?:(?<!\\.|\\$)\\b(readonly)\\s*)?(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.ergo"
				},
				"2": {
					"name": "meta.brace.square.ergo"
				},
				"3": {
					"name": "variable.parameter.ergo"
				}
			},
			"end": "(\\])\\s*(\\?\\s*)?|$",
			"endCaptures": {
				"1": {
					"name": "meta.brace.square.ergo"
				},
				"2": {
					"name": "keyword.operator.optional.ergo"
				}
			},
			"patterns": [
				{
					"include": "#type-annotation"
				}
			]
		},
		"indexer-mapped-type-declaration": {
			"name": "meta.indexer.mappedtype.declaration.ergo",
			"begin": "(?:(?<!\\.|\\$)\\b(readonly)\\s*)?(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(in)\\s+",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.ergo"
				},
				"2": {
					"name": "meta.brace.square.ergo"
				},
				"3": {
					"name": "entity.name.type.ergo"
				},
				"4": {
					"name": "keyword.operator.expression.in.ergo"
				}
			},
			"end": "(\\])\\s*(\\?\\s*)?|$",
			"endCaptures": {
				"1": {
					"name": "meta.brace.square.ergo"
				},
				"2": {
					"name": "keyword.operator.optional.ergo"
				}
			},
			"patterns": [
				{
					"include": "#type"
				}
			]
		},
		"function-declaration": {
			"name": "meta.function.ergo",
			"begin": "(?<!\\.|\\$)((\\bdefine)\\s+)\\b(function\\b)(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))\\s*",
			"beginCaptures": {
				"2": {
					"name": "keyword.control.define.ergo"
				},
				"3": {
					"name": "keyword.control.function.ergo"
				},
				"4": {
					"name": "entity.name.function.ergo"
				}
			},
			"end": "(?=;|\\})|(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#function-parameters"
				},
				{
					"include": "#return-type"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"constant-declaration": {
			"name": "meta.constant.ergo",
			"begin": "(?<!\\.|\\$)((\\bdefine)\\s+)\\b(constant\\b)(?!\\$)",
			"beginCaptures": {
				"2": {
					"name": "keyword.control.define.ergo"
				},
				"3": {
					"name": "keyword.control.constant.ergo"
				}
			},
			"end": "(?=$|;|}|(\\s+(of|in)\\s+))",
			"patterns": [
				{
					"include": "#var-single-variable"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"object-literal": {
			"name": "meta.objectliteral.ergo",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"patterns": [
				{
					"include": "#object-member"
				}
			]
		},
		"decl-block": {
			"name": "meta.block.ergo",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"patterns": [
				{
					"include": "#statements"
				}
			]
		},
		"after-operator-block": {
			"name": "meta.objectliteral.ergo",
			"begin": "(?<=[=(,\\[?+!]|await|return|yield|throw|in|of|typeof|&&|\\|\\||\\*)\\s*(\\{)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"patterns": [
				{
					"include": "#object-member"
				}
			]
		},
		"parameter-name": {
			"match": "(?:\\s*\\b(readonly)\\s+)?(?:\\s*\\b(public|private|protected)\\s+)?(\\.\\.\\.)?\\s*(?<!=|:)([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\??)",
			"captures": {
				"1": {
					"name": "storage.modifier.ergo"
				},
				"2": {
					"name": "storage.modifier.ergo"
				},
				"3": {
					"name": "keyword.operator.rest.ergo"
				},
				"4": {
					"name": "variable.parameter.ergo"
				},
				"5": {
					"name": "keyword.operator.optional.ergo"
				}
			}
		},
		"destructuring-parameter": {
			"patterns": [
				{
					"name": "meta.parameter.object-binding-pattern.ergo",
					"begin": "(?<!=|:)\\s*(\\{)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.binding-pattern.object.ergo"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.binding-pattern.object.ergo"
						}
					},
					"patterns": [
						{
							"include": "#parameter-object-binding-element"
						}
					]
				},
				{
					"name": "meta.paramter.array-binding-pattern.ergo",
					"begin": "(?<!=|:)\\s*(\\[)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.binding-pattern.array.ergo"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.binding-pattern.array.ergo"
						}
					},
					"patterns": [
						{
							"include": "#parameter-array-binding-element"
						}
					]
				}
			]
		},
		"parameter-object-binding-element": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)",
					"beginCaptures": {
						"1": {
							"name": "variable.object.property.ergo"
						},
						"2": {
							"name": "punctuation.destructuring.ergo"
						}
					},
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#parameter-object-binding-pattern"
						},
						{
							"include": "#parameter-array-binding-pattern"
						},
						{
							"name": "variable.parameter.ergo",
							"match": "([_$[:alpha:]][_$[:alnum:]]*)"
						},
						{
							"include": "#variable-initializer"
						}
					]
				},
				{
					"include": "#parameter-object-binding-pattern"
				},
				{
					"include": "#destructuring-parameter-rest"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"parameter-array-binding-element": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#parameter-object-binding-pattern"
				},
				{
					"include": "#parameter-array-binding-pattern"
				},
				{
					"include": "#destructuring-parameter-rest"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"destructuring-parameter-rest": {
			"match": "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)",
			"captures": {
				"1": {
					"name": "keyword.operator.rest.ergo"
				},
				"2": {
					"name": "variable.parameter.ergo"
				}
			}
		},
		"parameter-object-binding-pattern": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.ergo"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.object.ergo"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.object.ergo"
				}
			},
			"patterns": [
				{
					"include": "#parameter-object-binding-element"
				}
			]
		},
		"parameter-array-binding-pattern": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.ergo"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.array.ergo"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.array.ergo"
				}
			},
			"patterns": [
				{
					"include": "#parameter-array-binding-element"
				}
			]
		},
		"throws-declaration": {
			"name": "meta.clause.throws.ergo",
			"begin": "\\b(throws)\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.throws.ergo"
				}
			},
			"end": "(?<!:)((?=$)|(?=\\{|;|//|\\}))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type"
				}
			]
		},
		"return-type": {
			"name": "meta.return.type.ergo",
			"begin": "(?<=\\))\\s*(:)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.type.annotation.ergo"
				}
			},
			"end": "(?<!:)((?=$)|(?=\\{|;|//|\\}|\\bemits\\b))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#throws-declaration"
				},
				{
					"include": "#type"
				}
			]
		},
		"emit-type": {
			"name": "meta.return.emittype.ergo",
			"begin": "\\s*(emits\\b)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.emits.ergo"
				}
			},
			"end": "(?<!:)((?=$)|(?=\\{|;|//|\\}))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#throws-declaration"
				},
				{
					"include": "#type"
				}
			]
		},
		"type-annotation": {
			"name": "meta.type.annotation.ergo",
			"begin": ":",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.type.annotation.ergo"
				}
			},
			"end": "(?=$|[,);\\}\\]]|//)|(?==[^>])|(?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type"
				}
			]
		},
		"type": {
			"name": "meta.type.ergo",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#type-primitive"
				},
				{
					"include": "#type-builtin-literals"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#type-tuple"
				},
				{
					"include": "#type-object"
				},
				{
					"include": "#type-operators"
				},
				{
					"include": "#type-fn-type-parameters"
				},
				{
					"include": "#type-paren-or-function-parameters"
				},
				{
					"include": "#type-function-return-type"
				},
				{
					"include": "#type-name"
				}
			]
		},
		"function-parameters": {
			"name": "meta.parameters.ergo",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.begin.ergo"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.ergo"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#decorator"
				},
				{
					"include": "#destructuring-parameter"
				},
				{
					"include": "#parameter-name"
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"name": "punctuation.separator.parameter.ergo",
					"match": ","
				}
			]
		},
		"type-primitive": {
			"name": "support.type.primitive.ergo",
			"match": "(?<!\\.|\\$)\\b(string|number|boolean|symbol|any|void|never)\\b(?!\\$)"
		},
		"type-builtin-literals": {
			"name": "support.type.builtin.ergo",
			"match": "(?<!\\.|\\$)\\b(true|false|contract|state|now)\\b(?!\\$)"
		},
		"type-paren-or-function-parameters": {
			"name": "meta.type.paren.cover.ergo",
			"begin": "\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "meta.brace.round.ergo"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.ergo"
				}
			},
			"patterns": [
				{
					"include": "#type"
				},
				{
					"include": "#function-parameters"
				}
			]
		},
		"type-fn-type-parameters": {
			"patterns": [
				{
					"name": "meta.type.constructor.ergo",
					"match": "(?<!\\.|\\$)\\b(new)\\b(?=\\s*\\<)",
					"captures": {
						"1": {
							"name": "keyword.control.new.ergo"
						}
					}
				},
				{
					"name": "meta.type.constructor.ergo",
					"begin": "(?<!\\.|\\$)\\b(new)\\b\\s*(?=\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.new.ergo"
						}
					},
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#function-parameters"
						}
					]
				},
				{
					"name": "meta.type.function.ergo",
					"begin": "(?<=\\>)\\s*(?=\\()",
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#function-parameters"
						}
					]
				},
				{
					"name": "meta.type.function.ergo",
					"begin": "(?x)( \\s* (?= [(]\\s*( ([)]) |  (\\.\\.\\.) | ([_$[:alnum:]]+\\s*( ([:,?=])| ([)]\\s*=>) )) ) ) )",
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#function-parameters"
						}
					]
				}
			]
		},
		"type-function-return-type": {
			"name": "meta.type.function.return.ergo",
			"begin": "=>",
			"beginCaptures": {
				"0": {
					"name": "storage.type.function.arrow.ergo"
				}
			},
			"end": "(?<!=>)(?=[,\\]\\)\\{\\}=;>]|//|$)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "meta.object.type.ergo",
					"begin": "(?<==>)\\s*(\\{)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.block.ergo"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.block.ergo"
						}
					},
					"patterns": [
						{
							"include": "#type-object-members"
						}
					]
				},
				{
					"include": "#type"
				}
			]
		},
		"type-operators": {
			"patterns": [
				{
					"include": "#typeof-operator"
				},
				{
					"name": "keyword.operator.type.ergo",
					"match": "[&|]"
				}
			]
		},
		"type-function-return-type": {
			"name": "meta.type.function.return.ergo",
			"begin": "=>",
			"beginCaptures": {
				"0": {
					"name": "storage.type.function.arrow.ergo"
				}
			},
			"end": "(?<!=>)(?=[,\\]\\)\\{\\}=;>]|//|$)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "meta.object.type.ergo",
					"begin": "(?<==>)\\s*(\\{)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.block.ergo"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.block.ergo"
						}
					},
					"patterns": [
						{
							"include": "#type-object-members"
						}
					]
				},
				{
					"include": "#type"
				}
			]
		},
		"type-tuple": {
			"name": "meta.type.tuple.ergo",
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.square.ergo"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "meta.brace.square.ergo"
				}
			},
			"patterns": [
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"type-name": {
			"patterns": [
				{
					"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\.)",
					"captures": {
						"1": {
							"name": "entity.name.type.module.ergo"
						},
						"2": {
							"name": "punctuation.accessor.ergo"
						}
					}
				},
				{
					"name": "entity.name.type.ergo",
					"match": "[_$[:alpha:]][_$[:alnum:]]*"
				}
			]
		},
		"type-parameters": {
			"name": "meta.type.parameters.ergo",
			"begin": "DO_NOT_MATCH",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.typeparameters.begin.ergo"
				}
			},
			"end": "(?=$)|(>)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.typeparameters.end.ergo"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "storage.modifier.ergo",
					"match": "(?<!\\.|\\$)\\b(extends)\\b(?!\\$)"
				},
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"variable-initializer": {
			"begin": "(?<!=|!)(=)(?!=)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.assignment.ergo"
				}
			},
			"end": "(?=$|[,);}\\]])",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"for-loop": {
			"begin": "(?<!\\.|\\$)\\b(foreach)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.ergo"
				},
				"2": {
					"name": "meta.brace.round.ergo"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.ergo"
				}
			},
			"patterns": [
				{
					"include": "#var-expr"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"match-expression": {
			"name": "match-expression.expr.ergo",
			"begin": "(?<!\\.|\\$)\\b(match)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.match.ergo"
				},
				"2": {
					"name": "meta.brace.round.ergo"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.ergo"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"match-block": {
			"name": "match-block.expr.ergo",
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"end": "(?=\\})",
			"patterns": [
				{
					"include": "#case-clause"
				},
				{
					"include": "#statements"
				}
			]
		},
		"case-clause": {
			"name": "case-clause.expr.ergo",
			"begin": "(?<!\\.|\\$)\\b(case|default(?=:))\\b(?!\\$)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.match.ergo"
				}
			},
			"end": ":",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.section.case-statement.ergo"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"match-statement": {
			"name": "match-statement.expr.ergo",
			"begin": "(?<!\\.|\\$)(?=\\bmatch\\s*\\()",
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.ergo"
				}
			},
			"patterns": [
				{
					"include": "#match-expression"
				},
				{
					"include": "#match-block"
				}
			]
		},
		"support-objects": {
			"patterns": [
				{
					"name": "variable.language.arguments.ergo",
					"match": "(?<!\\.|\\$)\\b(arguments)\\b(?!\\$)"
				},
				{
					"name": "support.class.builtin.ergo",
					"match": "(?x)(?<!\\.|\\$)\\b(Array|ArrayBuffer|Atomics|Boolean|DataView|Date|Float32Array|Float64Array|Function|Generator |GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Promise|Proxy |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\\b(?!\\$)"
				},
				{
					"name": "support.class.error.ergo",
					"match": "(?<!\\.|\\$)\\b((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\\b(?!\\$)"
				},
				{
					"name": "support.function.ergo",
					"match": "(?x)(?<!\\.|\\$)\\b(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval| isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\\s*\\()"
				},
				{
					"match": "(?x)(?<!\\.|\\$)\\b(Math)(?:\\s*(\\.)\\s*(?:\n  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|\n  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|\n  round|sign|sin|sinh|sqrt|tan|tanh|trunc)\n  |\n  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "support.constant.math.ergo"
						},
						"2": {
							"name": "punctuation.accessor.ergo"
						},
						"3": {
							"name": "support.function.math.ergo"
						},
						"4": {
							"name": "support.constant.property.math.ergo"
						}
					}
				},
				{
					"match": "(?x)(?<!\\.|\\$)\\b(console)(?:\\s*(\\.)\\s*(\n  enforce|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log\n  |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "support.class.console.ergo"
						},
						"2": {
							"name": "punctuation.accessor.ergo"
						},
						"3": {
							"name": "support.function.console.ergo"
						}
					}
				},
				{
					"match": "(?<!\\.|\\$)\\b(JSON)(?:\\s*(\\.)\\s*(parse|stringify))?\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "support.constant.json.ergo"
						},
						"2": {
							"name": "punctuation.accessor.ergo"
						},
						"3": {
							"name": "support.function.json.ergo"
						}
					}
				},
				{
					"match": "(?x) (\\.) \\s* (?:\n  (constructor|length|prototype|__proto__) \n  |\n  (EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY))\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.ergo"
						},
						"2": {
							"name": "support.variable.property.ergo"
						},
						"3": {
							"name": "support.constant.ergo"
						}
					}
				},
				{
					"match": "(?x) (?<!\\.|\\$) \\b (?:\n  (document|event|navigator|performance|screen|window) \n  |\n  (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener\n  |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule\n  |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration\n  |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern\n  |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent\n  |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException\n  |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer\n  |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry\n  |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent\n  |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential\n  |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync\n  |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement\n  |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement\n  |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement\n  |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement\n  |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement\n  |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement\n  |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement\n  |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement\n  |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement\n  |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement\n  |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement\n  |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase\n  |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction\n  |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities\n  |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess\n  |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent\n  |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream\n  |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent\n  |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID\n  |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification\n  |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential\n  |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark\n  |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList\n  |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent\n  |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList\n  |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager\n  |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource\n  |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement\n  |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength\n  |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio\n  |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement\n  |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement\n  |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement\n  |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength\n  |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement\n  |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio\n  |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList\n  |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement\n  |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement\n  |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState\n  |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet\n  |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable\n  |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer\n  |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat\n  |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES\n  |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope\n  |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult\n  |XSLTProcessor))\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "support.variable.dom.ergo"
						},
						"2": {
							"name": "support.class.dom.ergo"
						}
					}
				},
				{
					"match": "(?x) (\\.) \\s* (?:\n  (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE\n  |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR\n  |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR\n  |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)\n  |\n  (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName\n  |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop\n  |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor\n  |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption\n  |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear\n  |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete\n  |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset\n  |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight\n  |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds\n  |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize\n  |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host\n  |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth\n  |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext\n  |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom\n  |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple\n  |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName\n  |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight\n  |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer\n  |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling\n  |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText\n  |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts\n  |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove\n  |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary\n  |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead\n  |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile\n  |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex))\\b(?!\\$|\\s*(<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\()",
					"captures": {
						"1": {
							"name": "punctuation.accessor.ergo"
						},
						"2": {
							"name": "support.constant.dom.ergo"
						},
						"3": {
							"name": "support.variable.property.dom.ergo"
						}
					}
				},
				{
					"name": "support.class.node.ergo",
					"match": "(?x)(?<!\\.|\\$)\\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream\n  |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\\b(?!\\$)"
				},
				{
					"name": "support.module.node.ergo",
					"match": "(?x)(?<!\\.|\\$)\\b(enforce|buffer|child_process|cluster|constants|crypto|dgram|dns|domain|events|fs|http|https|net\n  |os|path|punycode|querystring|readline|repl|stream|string_decoder|timers|tls|tty|url|util|vm|zlib)\\b(?!\\$)"
				},
				{
					"match": "(?x)(?<!\\.|\\$)\\b(process)(?:(\\.)(?:\n  (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)\n  |\n  (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)\n))?\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "support.variable.object.process.ergo"
						},
						"2": {
							"name": "punctuation.accessor.ergo"
						},
						"3": {
							"name": "support.variable.property.process.ergo"
						},
						"4": {
							"name": "support.function.process.ergo"
						}
					}
				},
				{
					"match": "(?<!\\.|\\$)\\b(?:(exports)|(module)(?:(\\.)(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "support.type.object.module.ergo"
						},
						"2": {
							"name": "support.type.object.module.ergo"
						},
						"3": {
							"name": "punctuation.accessor.ergo"
						},
						"4": {
							"name": "support.type.object.module.ergo"
						}
					}
				},
				{
					"name": "support.variable.object.node.ergo",
					"match": "(?<!\\.|\\$)\\b(global|GLOBAL|root|__dirname|__filename)\\b(?!\\$)"
				},
				{
					"match": "(?x) (\\.) \\s* \n(?:\n (on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|\n   Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|\n   Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|\n   Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|\n   Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|\n   Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|\n   Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|\n   Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\n ) |\n (shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|\n   scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|\n   sup|sub|substr|substring|splice|split|send|set(?:Milliseconds|Seconds|Minutes|Hours|\n   Month|Year|FullYear|Date|UTC(?:Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|\n   Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|\n   savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|\n   contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|\n   createEventObject|to(?:GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|\n   test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|\n   untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|\n   print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|\n   fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|\n   forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|\n   abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|\n   releaseCapture|releaseEvents|go|get(?:Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|\n   Time|Date|TimezoneOffset|UTC(?:Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|\n   Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|\n   moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back\n ) |\n (acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|\n   appendChild|appendData|before|blur|canPlayType|captureStream|\n   caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|\n   cloneContents|cloneNode|cloneRange|close|closest|collapse|\n   compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|\n   convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|\n   createAttributeNS|createCaption|createCDATASection|createComment|\n   createContextualFragment|createDocument|createDocumentFragment|\n   createDocumentType|createElement|createElementNS|createEntityReference|\n   createEvent|createExpression|createHTMLDocument|createNodeIterator|\n   createNSResolver|createProcessingInstruction|createRange|createShadowRoot|\n   createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|\n   deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|\n   deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|\n   enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|\n   exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|\n   getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|\n   getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|\n   getClientRects|getContext|getDestinationInsertionPoints|getElementById|\n   getElementsByClassName|getElementsByName|getElementsByTagName|\n   getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|\n   getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|\n   hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|\n   insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|\n   insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|\n   isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|\n   lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|\n   moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|\n   parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|\n   previousSibling|probablySupportsContext|queryCommandEnabled|\n   queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|\n   querySelector|querySelectorAll|registerContentHandler|registerElement|\n   registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|\n   removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|\n   removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|\n   requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|\n   scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|\n   setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|\n   setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|\n   setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|\n   slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|\n   submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|\n   toDataURL|toggle|toString|values|write|writeln\n )\n)(?=\\s*\\()",
					"captures": {
						"1": {
							"name": "punctuation.accessor.ergo"
						},
						"2": {
							"name": "support.function.event-handler.ergo"
						},
						"3": {
							"name": "support.function.ergo"
						},
						"4": {
							"name": "support.function.dom.ergo"
						}
					}
				}
			]
		},
		"function-call": {
			"begin": "(?:(\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.accessor.ergo"
				},
				"2": {
					"name": "entity.name.function.ergo"
				}
			},
			"end": "(?<=\\))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "meta.type.parameters.ergo",
					"begin": "\\<",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.typeparameters.begin.ergo"
						}
					},
					"end": "\\>",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.typeparameters.end.ergo"
						}
					},
					"patterns": [
						{
							"include": "#type"
						},
						{
							"include": "#punctuation-comma"
						}
					]
				},
				{
					"include": "#paren-expression"
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"name": "support.class.ergo",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\.\\s*prototype\\b(?!\\$))"
				},
				{
					"match": "(?x)(\\.)\\s*(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.ergo"
						},
						"2": {
							"name": "constant.other.object.property.ergo"
						},
						"3": {
							"name": "variable.other.object.property.ergo"
						}
					}
				},
				{
					"match": "(?x)(?:(\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*( (async\\s+)|(function\\s*[(<])|(function\\s+)| ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)| ((<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>)))",
					"captures": {
						"1": {
							"name": "punctuation.accessor.ergo"
						},
						"2": {
							"name": "entity.name.function.ergo"
						}
					}
				},
				{
					"match": "(\\.)\\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
					"captures": {
						"1": {
							"name": "punctuation.accessor.ergo"
						},
						"2": {
							"name": "constant.other.property.ergo"
						}
					}
				},
				{
					"match": "(\\.)\\s*([_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.ergo"
						},
						"2": {
							"name": "variable.other.property.ergo"
						}
					}
				},
				{
					"match": "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "constant.other.object.ergo"
						},
						"2": {
							"name": "variable.other.object.ergo"
						}
					}
				},
				{
					"name": "constant.other.ergo",
					"match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
				},
				{
					"name": "variable.other.readwrite.ergo",
					"match": "[_$[:alpha:]][_$[:alnum:]]*"
				}
			]
		},
		"cast": {
			"patterns": [
				{
					"include": "#jsx"
				}
			]
		},
		"new-expr": {
			"name": "new.expr.ergo",
			"begin": "(?<!\\.|\\$)\\b(new)\\b(?!\\$)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.new.ergo"
				}
			},
			"end": "(?<=\\))|(?=[;),]|$|((?<!\\.|\\$)\\bnew\\b(?!\\$)))",
			"patterns": [
				{
					"include": "#paren-expression"
				},
				{
					"include": "#type"
				}
			]
		},
		"object-member": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#method-declaration"
				},
				{
					"name": "meta.object.member.ergo",
					"begin": "(?=(?:(?:\\'[^']*\\')|(?:\\\"[^\"]*\\\")|(?:\\[[^\\]]*\\]))\\s*:)",
					"end": "(?=,|\\})",
					"patterns": [
						{
							"name": "meta.object-literal.key.ergo",
							"begin": "(?=(?:(?:\\'[^']*\\')|(?:\\\"[^\"]*\\\")|(?:\\[[^\\]]*\\]))\\s*:)",
							"end": ":",
							"endCaptures": {
								"0": {
									"name": "punctuation.separator.key-value.ergo"
								}
							},
							"patterns": [
								{
									"include": "#string"
								},
								{
									"include": "#array-literal"
								}
							]
						},
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.object.member.ergo",
					"begin": "(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*( (async\\s+)|(function\\s*[(<])|(function\\s+)| ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)| ((<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>))))",
					"beginCaptures": {
						"0": {
							"name": "meta.object-literal.key.ergo"
						},
						"1": {
							"name": "entity.name.function.ergo"
						},
						"2": {
							"name": "punctuation.separator.key-value.ergo"
						}
					},
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.object.member.ergo",
					"begin": "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(:)",
					"beginCaptures": {
						"0": {
							"name": "meta.object-literal.key.ergo"
						},
						"1": {
							"name": "punctuation.separator.key-value.ergo"
						}
					},
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.object.member.ergo",
					"begin": "\\.\\.\\.",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.spread.ergo"
						}
					},
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.object.member.ergo",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$)",
					"captures": {
						"1": {
							"name": "variable.other.readwrite.ergo"
						}
					}
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.control.flow.ergo",
					"match": "(?<!\\.|\\$)\\b(await)\\b(?!\\$)"
				},
				{
					"name": "keyword.operator.expression.delete.ergo",
					"match": "(?<!\\.|\\$)\\bdelete\\b(?!\\$)"
				},
				{
					"name": "keyword.operator.expression.in.ergo",
					"match": "(?<!\\.|\\$)\\bin\\b(?!\\$)"
				},
				{
					"name": "keyword.operator.expression.of.ergo",
					"match": "(?<!\\.|\\$)\\bof\\b(?!\\$)"
				},
				{
					"name": "keyword.operator.expression.instanceof.ergo",
					"match": "(?<!\\.|\\$)\\binstanceof\\b(?!\\$)"
				},
				{
					"name": "keyword.operator.new.ergo",
					"match": "(?<!\\.|\\$)\\bnew\\b(?!\\$)"
				},
				{
					"include": "#typeof-operator"
				},
				{
					"name": "keyword.operator.expression.void.ergo",
					"match": "(?<!\\.|\\$)\\bvoid\\b(?!\\$)"
				},
				{
					"begin": "(?<!\\.|\\$)\\bas\\b(?!\\$)",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.as.ergo"
						}
					},
					"end": "(?=$|[;,:})\\]])",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"name": "keyword.operator.spread.ergo",
					"match": "\\.\\.\\."
				},
				{
					"name": "keyword.operator.assignment.compound.ergo",
					"match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
				},
				{
					"name": "keyword.operator.assignment.compound.bitwise.ergo",
					"match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
				},
				{
					"name": "keyword.operator.bitwise.shift.ergo",
					"match": "<<|>>>|>>"
				},
				{
					"name": "keyword.operator.comparison.ergo",
					"match": "===|!==|==|!="
				},
				{
					"name": "keyword.operator.relational.ergo",
					"match": "<=|>=|<>|<|>"
				},
				{
					"name": "keyword.operator.logical.ergo",
					"match": "\\!|&&|\\|\\|"
				},
				{
					"name": "keyword.operator.bitwise.ergo",
					"match": "\\&|~|\\^|\\|"
				},
				{
					"name": "keyword.operator.assignment.ergo",
					"match": "\\="
				},
				{
					"name": "keyword.operator.decrement.ergo",
					"match": "--"
				},
				{
					"name": "keyword.operator.increment.ergo",
					"match": "\\+\\+"
				},
				{
					"name": "keyword.operator.arithmetic.ergo",
					"match": "%|\\*|/|-|\\+"
				}
			]
		},
		"typeof-operator": {
			"name": "keyword.operator.expression.typeof.ergo",
			"match": "(?<!\\.|\\$)\\btypeof\\b(?!\\$)"
		},
		"arrow-function": {
			"patterns": [
				{
					"name": "meta.arrow.ergo",
					"match": "(?<!\\.|\\$)(\\basync)(?=\\s*[<(])",
					"captures": {
						"1": {
							"name": "storage.modifier.async.ergo"
						}
					}
				},
				{
					"name": "meta.arrow.ergo",
					"match": "(?:(?<!\\.|\\$)(\\basync)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==>)",
					"captures": {
						"1": {
							"name": "storage.modifier.async.ergo"
						},
						"2": {
							"name": "variable.parameter.ergo"
						}
					}
				},
				{
					"name": "meta.arrow.ergo",
					"begin": "(?x)\\s*(?=(<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>)",
					"end": "(?==>)",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#type-parameters"
						},
						{
							"include": "#function-parameters"
						},
						{
							"include": "#arrow-return-type"
						}
					]
				},
				{
					"name": "meta.arrow.ergo",
					"begin": "=>",
					"beginCaptures": {
						"0": {
							"name": "storage.type.function.arrow.ergo"
						}
					},
					"end": "(?<=\\})|((?!\\{)(?=\\S))",
					"patterns": [
						{
							"include": "#decl-block"
						},
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"arrow-return-type": {
			"name": "meta.return.type.arrow.ergo",
			"begin": "(?<=\\))\\s*(:)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.type.annotation.ergo"
				}
			},
			"end": "(?<!:)((?=$)|(?==>|;|//))",
			"patterns": [
				{
					"include": "#type"
				}
			]
		},
		"punctuation-comma": {
			"name": "punctuation.separator.comma.ergo",
			"match": ","
		},
		"punctuation-semicolon": {
			"name": "punctuation.terminator.statement.ergo",
			"match": ";"
		},
		"punctuation-accessor": {
			"name": "punctuation.accessor.ergo",
			"match": "\\."
		},
		"paren-expression": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.round.ergo"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.ergo"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"qstring-double": {
			"name": "string.quoted.double.ergo",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.ergo"
				}
			},
			"end": "(\")|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.ergo"
				},
				"2": {
					"name": "invalid.illegal.newline.ergo"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"qstring-single": {
			"name": "string.quoted.single.ergo",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.ergo"
				}
			},
			"end": "(\\')|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.ergo"
				},
				"2": {
					"name": "invalid.illegal.newline.ergo"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"regex": {
			"patterns": [
				{
					"name": "string.regex.ergo",
					"begin": "(?<=[=(:,\\[?+!]|return|case|=>|&&|\\|\\||\\*\\/)\\s*(/)(?![/*+?])(?=.*/)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.ergo"
						}
					},
					"end": "(/)([gimuy]*)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.ergo"
						},
						"2": {
							"name": "keyword.other.ergo"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "string.regex.ergo",
					"begin": "(?<![_$[:alnum:]])/(?![/*])(?=(?:[^/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+/(?![/*])[gimy]*(?!\\s*[a-zA-Z0-9_$]))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ergo"
						}
					},
					"end": "(/)([gimuy]*)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.ergo"
						},
						"2": {
							"name": "keyword.other.ergo"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				}
			]
		},
		"regexp": {
			"patterns": [
				{
					"name": "keyword.control.anchor.regexp",
					"match": "\\\\[bB]|\\^|\\$"
				},
				{
					"name": "keyword.other.back-reference.regexp",
					"match": "\\\\[1-9]\\d*"
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
				},
				{
					"name": "keyword.operator.or.regexp",
					"match": "\\|"
				},
				{
					"name": "meta.group.enforceion.regexp",
					"begin": "(\\()((\\?=)|(\\?!))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						},
						"2": {
							"name": "punctuation.definition.group.enforceion.regexp"
						},
						"3": {
							"name": "meta.enforceion.look-ahead.regexp"
						},
						"4": {
							"name": "meta.enforceion.negative-look-ahead.regexp"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "meta.group.regexp",
					"begin": "\\((\\?:)?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						},
						"1": {
							"name": "punctuation.definition.group.capture.regexp"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "constant.other.character-class.set.regexp",
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						}
					},
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						}
					},
					"patterns": [
						{
							"name": "constant.other.character-class.range.regexp",
							"match": "(?:.|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x\\h\\h|u\\h\\h\\h\\h))|(\\\\c[A-Z])|(\\\\.))",
							"captures": {
								"1": {
									"name": "constant.character.numeric.regexp"
								},
								"2": {
									"name": "constant.character.control.regexp"
								},
								"3": {
									"name": "constant.character.escape.backslash.regexp"
								},
								"4": {
									"name": "constant.character.numeric.regexp"
								},
								"5": {
									"name": "constant.character.control.regexp"
								},
								"6": {
									"name": "constant.character.escape.backslash.regexp"
								}
							}
						},
						{
							"include": "#regex-character-class"
						}
					]
				},
				{
					"include": "#regex-character-class"
				}
			]
		},
		"regex-character-class": {
			"patterns": [
				{
					"name": "constant.other.character-class.regexp",
					"match": "\\\\[wWsSdDtrnvf]|\\."
				},
				{
					"name": "constant.character.numeric.regexp",
					"match": "\\\\([0-7]{3}|x\\h\\h|u\\h\\h\\h\\h)"
				},
				{
					"name": "constant.character.control.regexp",
					"match": "\\\\c[A-Z]"
				},
				{
					"name": "constant.character.escape.backslash.regexp",
					"match": "\\\\."
				}
			]
		},
		"string": {
			"name": "string.ergo",
			"patterns": [
				{
					"include": "#qstring-single"
				},
				{
					"include": "#qstring-double"
				}
			]
		},
		"template": {
			"name": "string.template.ergo",
			"begin": "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.tagged-template.ergo"
				},
				"2": {
					"name": "punctuation.definition.string.template.begin.ergo"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.template.end.ergo"
				}
			},
			"patterns": [
				{
					"include": "#template-substitution-element"
				},
				{
					"include": "#string-character-escape"
				}
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.ergo",
			"match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
		},
		"template-substitution-element": {
			"name": "meta.template.expression.ergo",
			"begin": "\\$\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.template-expression.begin.ergo"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.template-expression.end.ergo"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"literal": {
			"name": "literal.ergo",
			"patterns": [
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#none-literal"
				},
				{
					"include": "#numericConstant-literal"
				},
				{
					"include": "#array-literal"
				},
				{
					"include": "#contract-literal"
				},
				{
					"include": "#state-literal"
				}
			]
		},
		"array-literal": {
			"name": "meta.array.literal.ergo",
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.square.ergo"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "meta.brace.square.ergo"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.hex.ergo",
					"match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)"
				},
				{
					"name": "constant.numeric.binary.ergo",
					"match": "\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)"
				},
				{
					"name": "constant.numeric.octal.ergo",
					"match": "\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)"
				},
				{
					"match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3\n  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|            # 1E+3\n  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+(\\.)\\B)|                      # 1.\n  (?:\\B(\\.)[0-9]+\\b)|                      # .1\n  (?:\\b[0-9]+\\b(?!\\.))                     # 1\n)(?!\\$)",
					"captures": {
						"0": {
							"name": "constant.numeric.decimal.ergo"
						},
						"1": {
							"name": "meta.delimiter.decimal.period.ergo"
						},
						"2": {
							"name": "meta.delimiter.decimal.period.ergo"
						},
						"3": {
							"name": "meta.delimiter.decimal.period.ergo"
						},
						"4": {
							"name": "meta.delimiter.decimal.period.ergo"
						},
						"5": {
							"name": "meta.delimiter.decimal.period.ergo"
						},
						"6": {
							"name": "meta.delimiter.decimal.period.ergo"
						}
					}
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.ergo",
					"match": "(?<!\\.|\\$)\\btrue\\b(?!\\$)"
				},
				{
					"name": "constant.language.boolean.false.ergo",
					"match": "(?<!\\.|\\$)\\bfalse\\b(?!\\$)"
				}
			]
		},
		"none-literal": {
			"name": "variable.language.none.ergo",
			"match": "(?<!\\.|\\$)\\bnone\\b(?!\\$)"
		},
		"contract-literal": {
			"name": "variable.language.contract.ergo",
			"match": "(?<!\\.|\\$)\\bcontract\\b(?!\\$)"
		},
		"clause-literal": {
			"name": "variable.language.clause.ergo",
			"match": "(?<!\\.|\\$)\\bclause\\b(?!\\$)"
		},
		"state-literal": {
			"name": "variable.language.state.ergo",
			"match": "(?<!\\.|\\$)\\bstate\\b(?!\\$)"
		},
		"numericConstant-literal": {
			"patterns": [
				{
					"name": "constant.language.nan.ergo",
					"match": "(?<!\\.|\\$)\\bNaN\\b(?!\\$)"
				},
				{
					"name": "constant.language.infinity.ergo",
					"match": "(?<!\\.|\\$)\\bInfinity\\b(?!\\$)"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.documentation.ergo",
					"begin": "/\\*\\*(?!/)",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.ergo"
						}
					},
					"patterns": [
						{
							"include": "#docblock"
						}
					]
				},
				{
					"name": "comment.block.ergo",
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.ergo"
						}
					}
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.ergo"
						}
					},
					"end": "(?=$)",
					"patterns": [
						{
							"name": "comment.line.double-slash.ergo",
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.ergo"
								}
							},
							"end": "(?=$)"
						}
					]
				}
			]
		},
		"docblock": {
			"patterns": [
				{
					"name": "storage.type.class.jsdoc",
					"match": "(?<!\\w)@(abstract|access|alias|arg|argument|async|attribute|augments|author|beta|borrows|bubbes|callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright|default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exports?|extends|extension|extension_for|extensionfor|external|file|fileoverview|final|fires|for|function|global|host|ignore|implements|inherit[Dd]oc|inner|instance|interface|kind|lends|license|listens|main|member|memberof|method|mixex|mixins?|module|name|namespace|nocollapse|nosideeffects|override|overview|package|param|preserve|private|prop|property|protected|public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation|version|virtual|writeOnce)\\b"
				},
				{
					"match": "(?x)\n(?:(?<=@param)|(?<=@arg)|(?<=@argument)|(?<=@type))\n\\s+\n({(?:\n  \\* |                                        # {*} any type\n  \\? |                                        # {?} unknown type\n  (?:                                         # Check for a prefix\n    \\? |                                      # {?string} nullable type\n    !   |                                     # {!string} non-nullable type\n    \\.{3}                                     # {...string} variable number of parameters\n  )?\n  (?:\n    \\(                                        # Opening bracket of multiple types with parenthesis {(string|number)}\n      [a-zA-Z_$]+\n      (?:\n        (?:\n          [\\w$]*\n          (?:\\[\\])?                           # {(string[]|number)} type application, an array of strings or a number\n        ) |\n        \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>            # {Array<string>} or {Object<string, number>} type application (optional .)\n      )\n      (?:\n        [\\.|~]                                # {Foo.bar} namespaced, {string|number} multiple, {Foo~bar} class-specific callback\n        [a-zA-Z_$]+\n        (?:\n          (?:\n            [\\w$]*\n            (?:\\[\\])?                        # {(string|number[])} type application, a string or an array of numbers\n          ) |\n          \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>         # {Array<string>} or {Object<string, number>} type application (optional .)\n        )\n      )*\n    \\) |\n    [a-zA-Z_$]+\n    (?:\n      (?:\n        [\\w$]*\n        (?:\\[\\])?                            # {string[]|number} type application, an array of strings or a number\n      ) |\n      \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>             # {Array<string>} or {Object<string, number>} type application (optional .)\n    )\n    (?:\n      [\\.|~]                                 # {Foo.bar} namespaced, {string|number} multiple, {Foo~bar} class-specific callback\n      [a-zA-Z_$]+\n      (?:\n        [\\w$]* |\n        \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>           # {Array<string>} or {Object<string, number>} type application (optional .)\n      )\n    )*\n  )\n                                             # Check for suffix\n  (?:\\[\\])?                                  # {string[]} type application, an array of strings\n  =?                                         # {string=} optional parameter\n)})\n\\s+\n(\n  \\[                                         # [foo] optional parameter\n    \\s*\n    (?:\n      [a-zA-Z_$][\\w$]*\n      (?:\n        (?:\\[\\])?                            # Foo[].bar properties within an array\n        \\.                                   # Foo.Bar namespaced parameter\n        [a-zA-Z_$][\\w$]*\n      )*\n      (?:\n        \\s*\n        =                                    # [foo=bar] Default parameter value\n        \\s*\n        [\\w$\\s]*\n      )?\n    )\n    \\s*\n  \\] |\n  (?:\n    [a-zA-Z_$][\\w$]*\n    (?:\n      (?:\\[\\])?                              # Foo[].bar properties within an array\n      \\.                                     # Foo.Bar namespaced parameter\n      [a-zA-Z_$][\\w$]*\n    )*\n  )?\n)\n\\s+\n(?:-\\s+)?                                    # optional hyphen before the description\n((?:(?!\\*\\/).)*)                             # The type description",
					"captures": {
						"0": {
							"name": "other.meta.jsdoc"
						},
						"1": {
							"name": "entity.name.type.instance.jsdoc"
						},
						"2": {
							"name": "variable.other.jsdoc"
						},
						"3": {
							"name": "other.description.jsdoc"
						}
					}
				},
				{
					"match": "(?x)\n({(?:\n  \\* |                                       # {*} any type\n  \\? |                                       # {?} unknown type\n\n  (?:                                        # Check for a prefix\n    \\? |                                     # {?string} nullable type\n    !   |                                    # {!string} non-nullable type\n    \\.{3}                                    # {...string} variable number of parameters\n  )?\n\n  (?:\n    \\(                                       # Opening bracket of multiple types with parenthesis {(string|number)}\n      [a-zA-Z_$]+\n      (?:\n        [\\w$]* |\n        \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>           # {Array<string>} or {Object<string, number>} type application (optional .)\n      )\n      (?:\n        [\\.|~]                               # {Foo.bar} namespaced, {string|number} multiple, {Foo~bar} class-specific callback\n        [a-zA-Z_$]+\n        (?:\n          [\\w$]* |\n          \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>         # {Array<string>} or {Object<string, number>} type application (optional .)\n        )\n      )*\n    \\) |\n    [a-zA-Z_$]+\n    (?:\n      [\\w$]* |\n      \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>             # {Array<string>} or {Object<string, number>} type application (optional .)\n    )\n    (?:\n      [\\.|~]                                 # {Foo.bar} namespaced, {string|number} multiple, {Foo~bar} class-specific callback\n      [a-zA-Z_$]+\n      (?:\n        [\\w$]* |\n        \\.?<[\\w$]+(?:,\\s+[\\w$]+)*>           # {Array<string>} or {Object<string, number>} type application (optional .)\n      )\n    )*\n  )\n                                             # Check for suffix\n  (?:\\[\\])?                                  # {string[]} type application, an array of strings\n  =?                                         # {string=} optional parameter\n)})\n\\s+\n(?:-\\s+)?                                    # optional hyphen before the description\n((?:(?!\\*\\/).)*)                             # The type description",
					"captures": {
						"0": {
							"name": "other.meta.jsdoc"
						},
						"1": {
							"name": "entity.name.type.instance.jsdoc"
						},
						"2": {
							"name": "other.description.jsdoc"
						}
					}
				}
			]
		},
		"jsx-tag-attributes": {
			"patterns": [
				{
					"include": "#jsx-tag-attribute-name"
				},
				{
					"include": "#jsx-tag-attribute-assignment"
				},
				{
					"include": "#jsx-string-double-quoted"
				},
				{
					"include": "#jsx-string-single-quoted"
				},
				{
					"include": "#jsx-evaluated-code"
				}
			]
		},
		"jsx-tag-attribute-name": {
			"name": "meta.tag.attribute-name.ergo",
			"match": "(?x)\n  \\s*\n  ([_$a-zA-Z][-$\\w]*)\n  (?=\\s|=|/?>|/\\*|//)",
			"captures": {
				"1": {
					"name": "entity.other.attribute-name.ergo"
				}
			}
		},
		"jsx-tag-attribute-assignment": {
			"name": "keyword.operator.assignment.ergo",
			"match": "=(?=\\s*(?:'|\"|{|/\\*|//|\\n))"
		},
		"jsx-string-double-quoted": {
			"name": "string.jsxAttributeValue.quoted.double.ergo",
			"begin": "\"",
			"end": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.jsxAttributeValue.begin.ergo"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.jsxAttributeValue.end.ergo"
				}
			},
			"patterns": [
				{
					"include": "#jsx-attributeValue-entities"
				}
			]
		},
		"jsx-string-single-quoted": {
			"name": "string.jsxAttributeValue.quoted.single.ergo",
			"begin": "'",
			"end": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.jsxAttributeValue.begin.ergo"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.jsxAttributeValue.end.ergo"
				}
			},
			"patterns": [
				{
					"include": "#jsx-attributeValue-entities"
				}
			]
		},
		"jsx-entities": {
			"patterns": [
				{
					"name": "constant.character.entity.ergo",
					"match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
					"captures": {
						"1": {
							"name": "punctuation.definition.entity.ergo"
						},
						"3": {
							"name": "punctuation.definition.entity.ergo"
						}
					}
				},
				{
					"name": "invalid.illegal.bad-ampersand.ergo",
					"match": "&"
				}
			]
		},
		"jsx-attributeValue-entities": {
			"patterns": [
				{
					"name": "constant.character.entity.jsxAttributeValue.ergo",
					"match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
					"captures": {
						"1": {
							"name": "punctuation.definition.entity.jsxAttributeValue.ergo"
						},
						"3": {
							"name": "punctuation.definition.entity.jsxAttributeValue.ergo"
						}
					}
				},
				{
					"name": "invalid.illegal.bad-ampersand.jsxAttributeValue.ergo",
					"match": "&"
				}
			]
		},
		"jsx-evaluated-code": {
			"name": "meta.embedded.expression.ergo",
			"begin": "{",
			"end": "}",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.embedded.begin.ergo"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.section.embedded.end.ergo"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"jsx-tag-attributes-illegal": {
			"name": "invalid.illegal.attribute.ergo",
			"match": "\\S+"
		},
		"jsx-tag-without-attributes": {
			"name": "meta.tag.without-attributes.ergo",
			"begin": "(<)\\s*([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\\s*(>)",
			"end": "(</)\\s*([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\\s*(>)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.tag.begin.ergo"
				},
				"2": {
					"name": "entity.name.tag.ergo"
				},
				"3": {
					"name": "punctuation.definition.tag.end.ergo"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.tag.begin.ergo"
				},
				"2": {
					"name": "entity.name.tag.ergo"
				},
				"3": {
					"name": "punctuation.definition.tag.end.ergo"
				}
			},
			"contentName": "meta.jsx.children.tsx",
			"patterns": [
				{
					"include": "#jsx-children"
				}
			]
		},
		"jsx-tag-in-expression": {
			"begin": "(?x)\n  (?<=[({\\[,?=>]|&&|\\|\\||\\?|\\Wreturn|^return|\\Wdefault|^)\\s*\n  (?!(<)\\s*([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\\s*(>)) #look ahead is not start of tag without attributes\n  (?!<\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s+[^=>])|,)) # look ahead is not type parameter of arrow\n  (?=(<)\\s*\n  ([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\n  (?=\\s+(?!\\?)|/?>))",
			"end": "(/>)|(?:(</)\\s*([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\\s*(>))",
			"endCaptures": {
				"0": {
					"name": "meta.tag.ergo"
				},
				"1": {
					"name": "punctuation.definition.tag.end.ergo"
				},
				"2": {
					"name": "punctuation.definition.tag.begin.ergo"
				},
				"3": {
					"name": "entity.name.tag.ergo"
				},
				"4": {
					"name": "punctuation.definition.tag.end.ergo"
				}
			},
			"patterns": [
				{
					"include": "#jsx-tag"
				}
			]
		},
		"jsx-child-tag": {
			"begin": "(?x)\n  (?=(<)\\s*\n  ([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\n  (?=\\s+(?!\\?)|/?>))",
			"end": "(/>)|(?:(</)\\s*([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\\s*(>))",
			"endCaptures": {
				"0": {
					"name": "meta.tag.ergo"
				},
				"1": {
					"name": "punctuation.definition.tag.end.ergo"
				},
				"2": {
					"name": "punctuation.definition.tag.begin.ergo"
				},
				"3": {
					"name": "entity.name.tag.ergo"
				},
				"4": {
					"name": "punctuation.definition.tag.end.ergo"
				}
			},
			"patterns": [
				{
					"include": "#jsx-tag"
				}
			]
		},
		"jsx-tag": {
			"name": "meta.tag.ergo",
			"begin": "(?x)\n  (?=(<)\\s*\n  ([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\n  (?=\\s+(?!\\?)|/?>))",
			"end": "(?=(/>)|(?:(</)\\s*([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\\s*(>)))",
			"patterns": [
				{
					"begin": "(?x)\n  (<)\\s*\n  ([_$a-zA-Z][-$\\w.]*(?<!\\.|-))\n  (?=\\s+(?!\\?)|/?>)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.tag.begin.ergo"
						},
						"2": {
							"name": "entity.name.tag.ergo"
						}
					},
					"end": "(?=[/]?>)",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#jsx-tag-attributes"
						},
						{
							"include": "#jsx-tag-attributes-illegal"
						}
					]
				},
				{
					"begin": "(>)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.tag.end.ergo"
						}
					},
					"end": "(?=</)",
					"contentName": "meta.jsx.children.tsx",
					"patterns": [
						{
							"include": "#jsx-children"
						}
					]
				}
			]
		},
		"jsx-tag-invalid": {
			"name": "invalid.illegal.tag.incomplete.ergo",
			"match": "<\\s*>"
		},
		"jsx-children": {
			"patterns": [
				{
					"include": "#jsx-tag-without-attributes"
				},
				{
					"include": "#jsx-child-tag"
				},
				{
					"include": "#jsx-tag-invalid"
				},
				{
					"include": "#jsx-evaluated-code"
				},
				{
					"include": "#jsx-entities"
				}
			]
		},
		"jsx": {
			"patterns": [
				{
					"include": "#jsx-tag-without-attributes"
				},
				{
					"include": "#jsx-tag-in-expression"
				},
				{
					"include": "#jsx-tag-invalid"
				}
			]
		}
	}
}